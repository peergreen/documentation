<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xml:id="shelbie.book"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Get started with Peergreen Platform</title>
	<productname>Peergreen Platform</productname>
    <copyright>
      <year>2013</year>
    </copyright>

    <authorgroup>

      <author>
        <personname></personname>

        <affiliation>
          <orgname></orgname>
        </affiliation>
      </author>

    </authorgroup>

    <date><?eval ${date}?></date>

    <releaseinfo><?eval ${project.version} ?></releaseinfo>

    <legalnotice>
      <para>This work is licensed under the Creative Commons
      Attribution-ShareAlike License. To view a copy of this license,visit
      <link
      xlink:href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">http://creativecommons.org/licenses/by-sa/2.0/deed.en</link>
      or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford,
      California 94305, USA.</para>
    </legalnotice>
  </info>

  <chapter>
  <title>Introduction</title>
	
	<para>
		The goal of the book is to get you up and running Peergreen Server as quickly 
		as possible. It provides basic steps described in the following sections. Note 
		that you may need to refer other guides for further information. 
	</para>
</chapter>
	
<chapter>
	<title>What is Peergreen Server ?</title>
	<para>
		Peergreen Server is an OSGi based “à la carte” and cloud native application 
		server targeting  both the PaaS and the Internet of Things requirements. Its 
		low footprint enables its deployment from server in data-centers to embedded 
		gateways. 
	</para>
	<para>
		Peergreen  is a software company started by the core team who developed JOnAS 
		the OW2 Java EE Application Server.
	</para>
</chapter>
	
<chapter>
	<title>Prerequisites</title>
	<para>
		Peergreen Server requires a Java SE 7 environment to run. You may refer to 
		Oracle web site (<link
		xlink:href="http://www.oracle.com/technetwork/java/javase/overview/index.html">
		Java SE</link> or <link 
		xlink:href="http://www.oracle.com/technetwork/java/embedded/overview/getstarted/index.html">
		Java SE Embedded</link>) or any others compliant JVM products documentations 
		for details on how to download and install Java SE 7 or greater. 
	</para>
</chapter>
	
<chapter>
	<title>Download</title>
	<para>
		Peergreen Server can be downloaded from the Peergreen Web site here. The jar 
		file is compressed with <link 
		xlink:href="http://docs.oracle.com/javase/1.5.0/docs/guide/deployment/deployment-guide/pack200.html">
		pack200</link> to reduce the download time. It will be unpacked automatically at the first launch. 
	</para>
</chapter>
	
<chapter>
	<title>Starting Peergreen Server</title>
	<para>
		To start Peergreen Server, run the java command : 
	</para>
	<screen><prompt>java -jar platform-subsystems-1.0.0-SNAPSHOT.jar.</prompt></screen>
	<para>
		The kernel is started once the following message appears :
	</para>
	<screen><prompt>Peergreen Kernel started in 5.919 seconds (Bundles:84, StartLevel:1)</prompt></screen>
	<para>
		At the first launch, the kernel uncompress the pack200 jar file and creates 
		the server’s directory tree.
	</para>
</chapter>
	
<chapter>
	<title>Setting the internet proxy</title>
	<para>
		At each launch, Peergreen Server checks Peergreen’news enabling to be aware 
		of new releases availaibility. For that, it requires an internet connection.  
		If you’re behind an internet proxy, you can set its parameters through the 
		Java properties :
	</para>
	<screen><prompt>-Dhttp.proxyHost=myproxy.mycompany.com -Dhttp.proxyPort=80</prompt></screen>
</chapter>
	
<chapter>
	<title>Directory tree</title>
	<para>
		The Peergreen Server  directories tree contains the following elements :
	</para>
	<table frame="none">
		<title>Directory tree</title>
		<tgroup cols="2" align="justify" colsep="1" rowsep="1">
			<colspec colname="c1" colwidth="1*"/>
			<colspec colname="c2" colwidth="3*"/>
			<thead>
				<row>
					<entry align="center"><emphasis role="bold">Directory</emphasis></entry>
					<entry align="center"><emphasis role="bold">Description</emphasis></entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>mvn-cache</entry>
					<entry>Cache of the maven artefacts downloaded during  
					application deployment</entry>
				</row>
				<row>
					<entry>peergreen</entry>
					<entry>Work space of the server . If removed the 
					persistent store is lost.</entry>
				</row>
				<row>
					<entry>peergreen/logs</entry>
					<entry>Error &amp; messages debug files</entry>
				</row>
				<row>
					<entry>peergreen/storage</entry>
					<entry>Persistent store of the underlying OSGi framework</entry>
				</row>
				<row>
					<entry>peergreen/bundles</entry>
					<entry>Bundles of the platform</entry>
				</row>
				<row>
					<entry>deploy</entry>
					<entry>Application deployment directory (bundles, deployment plan). 
					The directory is periodically scanned . You can drop a file to 
					deploy it or remove it to undeploy it. If the file is touched, 
					the related module is updated. </entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</chapter>
	
<chapter>
	<title>A few useful commands</title>
	<para>
		Peergreen Server provides a dynamic shell with native commands. 
		The shell session is automatically started at the server launch.
	</para>
	<para>
		You can use the help command to get an overview of the commands :
	</para>
	<screen><prompt>…
Scope 'shelbie' (9 commands)
-----------------------------------
  shelbie:shutdown     Shutdown the OSGi platform
  shelbie:each         Execute a closure on a list of arguments.
  shelbie:help         Display command's help
 …</prompt></screen>
	<para>
		The commands are categorized with a prefix for easier search and uniqueness. 
		For example, commands related to the underlying JVM resources are prefixed 
		with <emphasis role="bold">‘javavm:’</emphasis>.
	</para>
	<para>
		The following table describes a few commands:
	</para>
	<table frame="none">
		<title>Commands description</title>
		<tgroup cols="2" align="justify" colsep="1" rowsep="1">
			<colspec colname="c1" colwidth="1*"/>
			<colspec colname="c2" colwidth="3*"/>
			<thead>
				<row>
					<entry align="center"><emphasis role="bold">Command</emphasis></entry>
					<entry align="center"><emphasis role="bold">Description</emphasis></entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>shelbie:help</entry>
					<entry>List the available command</entry>
				</row>
				<row>
					<entry>shelbie:history</entry>
					<entry>List commands historic</entry>
				</row>
				<row>
					<entry>shelbie:shutdown</entry>
					<entry>Shutdown the underlying OSGi gateway</entry>
				</row>
				<row>
					<entry>info:events</entry>
					<entry>Print relevant platform events with timestamps.</entry>
				</row>
				<row>
					<entry>info:elapsed &lt;e1&gt; &lt;e2&gt;</entry>
					<entry>Compute the elapsed time between e2 and e1</entry>
				</row>
				<row>
					<entry>javavm:threads</entry>
					<entry>Display threads list</entry>
				</row>
				<row>
					<entry>javavm:thread-dump</entry>
					<entry>Get a threads dump</entry>
				</row>
				<row>
					<entry>deployment:list</entry>
					<entry>List deployed artefacts with uri</entry>
				</row>
				<row>
					<entry>deployment:deploy-artefact &lt;uri&gt;</entry>
					<entry>deploy an artefact. The ‘-p’ flag enables to persist 
					the deployment and recover it after a JVM reboot.</entry>
				</row>
				<row>
					<entry>deployment:undeploy-artefact</entry>
					<entry>undeploy an artefact</entry>
				</row>
				<row>
					<entry>felix:lb</entry>
					<entry>List installed bundles</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</chapter>
	
<chapter>
	<title>Remote access</title>
	<para>
		Peergreen Server provides a shell remote access through a simple telnet interface. 
		By default, the server listens on the 10023 port number for all the network interfaces. 
		So you can  connect to the platform shell with the following command:
	</para>
	<screen><prompt>telnet localhost 10023</prompt></screen>
</chapter>
	
<chapter>
	<title>Deploy a sample application</title>
	<para>
		TO DO
	</para>
</chapter>
	
<chapter>
	<title>Deployment plan</title>
	<para>
		Peergreen Plaftom supports <link 
		xlink:href="http://jonas.ow2.org/JONAS_5_3_0_M7/doc/doc-en/html/deployment-plans_guide.html">
		JOnAS’s deployment plan</link> enabling to deploy in one unit a whole set of application 
		modules. Concretely a deployment plan is an XML file with a sorted list of modules to deploy. 
		The modules can be retrieved from maven repositories as illustrated in the following example :
	</para>
	<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;deployment-plan   
  xmlns="http://jonas.ow2.org/ns/deployment-plan/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
  xmlns:m2="http://jonas.ow2.org/ns/deployment-plan/maven2/1.0"
  xsi:schemaLocation="http://jonas.ow2.org/ns/deployment-plan/1.0 
			http://jonas.ow2.org/ns/deployment-plan/1.0/deployment-plan-1.0.xsd                       
			http://jonas.ow2.org/ns/deployment-plan/maven2/1.0 
			http://jonas.ow2.org/ns/deployment-plan/maven2-deployment-plan-1.0.xsd"
  atomic="false" id="dp-example"&gt;

  &lt;deployment id="org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar" 
		xsi:type="m2:maven2-deploymentType" reloadable="false" 
		start="true" reference="true" startlevel="1" 
		starttransient="true"&gt;
    &lt;m2:groupId&gt;org.apache.geronimo.specs&lt;/m2:groupId&gt;
    &lt;m2:artifactId&gt;geronimo-jms_1.1_spec&lt;/m2:artifactId&gt;
    &lt;m2:version&gt;1.1.1&lt;/m2:version&gt;
    &lt;m2:type&gt;jar&lt;/m2:type&gt;
  &lt;/deployment&gt;

  &lt;deployment id="org.apache.geronimo.specs:geronimo-servlet_2.5_spec:jar" 
		xsi:type="m2:maven2-deploymentType" reloadable="false" 
		start="true" reference="true" startlevel="1" 
		starttransient="true"&gt;
    &lt;m2:groupId&gt;org.apache.geronimo.specs&lt;/m2:groupId&gt;
    &lt;m2:artifactId&gt;geronimo-servlet_2.5_spec&lt;/m2:artifactId&gt;
    &lt;m2:version&gt;1.2&lt;/m2:version&gt;
    &lt;m2:type&gt;jar&lt;/m2:type&gt;
  &lt;/deployment&gt;

  &lt;deployment id="org.apache.commons:com.springsource.org.apache.commons.beanutils:jar" 
		xsi:type="m2:maven2-deploymentType" reloadable="false" start="true" 
		reference="true" startlevel="1" starttransient="true"&gt;
    &lt;m2:groupId&gt;org.apache.commons&lt;/m2:groupId&gt;
    &lt;m2:artifactId&gt;com.springsource.org.apache.commons.beanutils&lt;/m2:artifactId&gt;
    &lt;m2:version&gt;1.8.3&lt;/m2:version&gt;
    &lt;m2:type&gt;jar&lt;/m2:type&gt;
  &lt;/deployment&gt;

  &lt;deployment id="org.apache.commons:com.springsource.org.apache.commons.collections:jar" 
		xsi:type="m2:maven2-deploymentType" reloadable="false" start="true" 
		reference="true" startlevel="1" starttransient="true"&gt;    
	&lt;m2:groupId&gt;org.apache.commons&lt;/m2:groupId&gt;
    &lt;m2:artifactId&gt;com.springsource.org.apache.commons.collections&lt;/m2:artifactId&gt;
    &lt;m2:version&gt;3.2.1&lt;/m2:version&gt;
    &lt;m2:type&gt;jar&lt;/m2:type&gt;
  &lt;/deployment&gt;

  ...

&lt;/deployment-plan&gt;</programlisting>
</chapter>
	
<chapter>
	<title>Logging</title>
	<para>
		Standard and error outputs are redirected in files under the &lt;your-dir&gt;/peergreen/logs directory :
	</para>
	<screen><prompt>system.out
system.err</prompt></screen>
</chapter>
	
<chapter>
	<title>Stopping Peergreen Server</title>
	<para>
		To stop Peergreen server from the console, enter <emphasis role="bold">^D</emphasis> in the console.
	</para>
	<para>
		Alternatively, you can also run the following command:
	</para>
	<screen><prompt>osgi:shutdown</prompt></screen>
	<para>
		Whenever some application threads don’t stop, the platform print a message and kill all the remaining  
		threads. You can disable this behavior with the  java property :
	</para>
	<screen><prompt>-Dcom.peergreen.bootstrap.thread.check.reportonly=true</prompt></screen>
</chapter>

</book>
