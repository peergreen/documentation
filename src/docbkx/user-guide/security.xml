<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="security" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Security</title>

  <section>
    <title>Secured elements</title>

    <para>Peergreen security module is connected by default to other server's
    components.</para>

    <section>
      <title>Shell console</title>

      <para>The shell that opens by default when launching a server is
      automatically authenticated as 'admin' (password 'peergreen').</para>

      <para>If the administrator decide to change theses credentials, at
      server relaunch, the console will ask for new valid credentials until
      success (just like Unix terminals).</para>
    </section>

    <section>
      <title>Web applications</title>

      <para>The integrated web server is connected to the default Peergreen's
      AcountStore (aka realm, user base, ...).</para>

      <para>If the deployed web applications are secured, authentication and
      authorization requests performed by the web server will go through the
      connected AccountStore.</para>
    </section>
  </section>

  <section>
    <title>Configuration</title>

    <para>Security configuration happen through shell commands. The
    administrator must open a shell session on the server to be configured
    before any other actions: either using the shell opened when launching the
    server or using the telnet shell (<command>telnet localhost
    10023</command>).</para>

    <section>
      <title>Common commands</title>

      <itemizedlist>
        <listitem>
          <para><command>security:list-stores</command>: List the
          AccountStore(s) known by the system</para>

          <programlisting>admin@peergreen-platform$ security:list-stores 
AccountStore(s) of the system:
 * ServerAccountStore
</programlisting>
        </listitem>

        <listitem>
          <para><command>security:set-session-realm</command>: Store the given
          realm in the shell's session to avoid extra typing for
          commands</para>

          <programlisting>admin@peergreen-platform$ security:set-session-realm ServerAccountStore
</programlisting>
        </listitem>

        <listitem>
          <para><command>security:show-subject</command>: Display details
          about the currently connected subject (username, roles, ...)</para>

          <programlisting>admin@peergreen-platform$ security:show-subject 
Objet :
	Principal : UserPrincipal[admin]
	Principal : RoleGroup[platform-user, platform-admin]
</programlisting>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Manage users</title>

      <para>All user's management operations are available as shell
      commands.</para>

      <section>
        <title>Display known users</title>

        <para>Use the <command>security:list-accounts</command> command to
        display basic information about registered users.</para>

        <programlisting>admin@peergreen-platform$ security:list-accounts 
AccountStore 'ServerAccountStore' contains 1 account(s).
[  Status]                     Login Roles
[ enabled]                     admin platform-admin, platform-user
</programlisting>

        <para>More details can be displayed using the
        <command>security:detail-account</command> command.</para>

        <programlisting>admin@peergreen-platform$ security:detail-account admin
Login: admin (enabled)
Roles (2):
  * platform-admin
  * platform-user
</programlisting>
      </section>

      <section>
        <title>Create a new user</title>

        <para>Creating a new account in the store ask the administrator for
        the login and the password associated with the account.</para>

        <programlisting>admin@peergreen-platform$ security:create-account guillaume
  Enter password: 
</programlisting>

        <note>
          <para>The password entered by the administrator is never echoed on
          the screen</para>
        </note>

        <note>
          <para>By default, the created account is <emphasis>not</emphasis>
          associated to any role</para>
        </note>
      </section>

      <section>
        <title>Update user</title>

        <para>Accounts are representing user's and there attributes can be
        changed over time.</para>

        <warning>
          <para>Changing account's attributes may not be reflected in real
          time (currently logged users will not be impacted until next
          login).</para>
        </warning>

        <section>
          <title>Change password and/or login</title>

          <para>Password and login ID are account's attributes that can be
          modified dynamically. Notice that changing the login will remove the
          old login ID: it will not be usable anymore.</para>

          <programlisting>admin@peergreen-platform$ security:change-login guillaume
Attention, this will change the security identifier of 'guillaume'
Notice that currently open connections using this account will not bechanged and will require a re-connection.
  Enter new login: florent
</programlisting>

          <programlisting>admin@peergreen-platform$ security:change-password florent
  Enter new password: 
</programlisting>
        </section>

        <section>
          <title>Add and remove roles</title>

          <para>This is the most common operation on accounts: being
          associated with a role gives additional permissions.</para>

          <programlisting>admin@peergreen-platform$ security:add-roles florent architect webmaster
admin@peergreen-platform$ security:detail-account florent
Login: florent (enabled)
Roles (2):
  * architect
  * webmaster
</programlisting>

          <note>
            <para>Any number of additional roles can be provided at once. If
            the role is already associated to the account it will not be
            stored twice.</para>
          </note>

          <programlisting>admin@peergreen-platform$ security:remove-roles florent webmaster
admin@peergreen-platform$ security:detail-account florent
Login: florent (enabled)
Roles (1):
  * architect
</programlisting>

          <note>
            <para>If the administrator tries to dissociate a non-existing
            role, <command>remove-role</command> will act as no-op.</para>
          </note>
        </section>
      </section>

      <section>
        <title>Remove user</title>

        <para>Finally, accounts can be deleted permanently with the
        <command>security:delete-account</command> command.</para>

        <programlisting>admin@peergreen-platform$ security:delete-account florent
admin@peergreen-platform$ security:list-accounts 
AccountStore 'ServerAccountStore' contains 1 account(s).
[  Status]                     Login Roles
[ enabled]                     admin platform-admin, platform-user
</programlisting>
      </section>
    </section>
  </section>

  <section>
    <title>Securing Web applications</title>

    <para><literal>BASIC</literal> and <literal>FORM</literal> are the 2
    currently supported authentication methods.</para>

    <para>To secure the webapp the <filename>WEB-INF/web.xml</filename> needs
    to have a <tag>&lt;login-config&gt;</tag> element using either
    <literal>FORM</literal> or <literal>BASIC</literal> as
    <tag>&lt;auth-method&gt;</tag> value.</para>

    <section>
      <title>Basic Authentication</title>

      <para>When using Basic authentication, the user's credentials are just
      <link xlink:href="https://en.wikipedia.org/wiki/Base64">Base64</link>
      encoded by the browser before being sent to the server.</para>

      <programlisting language="xml">  &lt;login-config&gt;
    &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
  &lt;/login-config&gt;
</programlisting>
    </section>

    <section>
      <title>Form Authentifcation</title>

      <para>Form authentication is a Basic authentication evolution: instead
      of having the browser opening a model window asking for
      username/password, the web site can provide its own authentication
      page.</para>

      <programlisting language="xml">  &lt;login-config&gt;
    &lt;auth-method&gt;FORM&lt;/auth-method&gt;
    &lt;form-login-config&gt;
      &lt;form-login-page&gt;/login.jsp&lt;/form-login-page&gt;
      &lt;form-error-page&gt;/&lt;/form-error-page&gt;
    &lt;/form-login-config&gt;
  &lt;/login-config&gt;
</programlisting>

      <para>With the corresponding JSP page (action and name's value are
      important):</para>

      <programlisting language="xml">&lt;form action="<emphasis>j_security_check</emphasis>" method="get"&gt;
  &lt;label for="username"&gt;Username: &lt;/label&gt;
  &lt;input id="username" type="text" name="<emphasis>j_username</emphasis>" placeholder="Enter username" /&gt;
  &lt;label for="password"&gt;Password: &lt;/label&gt;
  &lt;input id="password" type="password" name="<emphasis>j_password</emphasis>" placeholder="Enter password" /&gt;
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</programlisting>
    </section>
  </section>
</chapter>
