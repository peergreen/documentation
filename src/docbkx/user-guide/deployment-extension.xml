<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="deployment-extension"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Deployment Extension</title>

  <para>Deployment of artifacts in Peergreen is managed by the deployment
  service. This service allows to plug new processors that adds some logic and
  allows to deploy new features</para>

  <section>
    <title>Definitions</title>

    <section>
      <title>Artifact</title>

      <para>Artifact is the deployment unit of Peergreen deployment service.
      Artifact is represented by</para>

      <itemizedlist>
        <listitem>
          <para>a <emphasis>URI</emphasis> : URI referencing the artifact that
          needs to be deployed on the server. (ie :
          f<uri>ile:///my/path/my.archive</uri>.... or
          <uri>mvn://gId:aId:1.0.0</uri> or
          <uri>http://mywebsite.com/my.archive</uri></para>
        </listitem>

        <listitem>
          <para>a <emphasis>name</emphasis> : A logical name for the given
          artifact</para>
        </listitem>
      </itemizedlist>

      <para>The artifact contains facets that provides some metadata about the
      artifact being processed.</para>

      <para>For example, it will include the <varname>Archive</varname> facet
      if the archive is a Java ARchive (.jar) while it will include
      <varname>Content</varname> facet if it's a content file. XML file will
      provide the <varname>XMLContent</varname> facet, etc.</para>
    </section>

    <section>
      <title>Facet</title>

      <para>The <varname>Facets</varname> are stored in the artifact. A Facet
      is retrieved by doing artifact.as(FacetInterface.class). If the facet is
      available, the instance of the facet will be returned else null will be
      returned. Facets are added by processors and add data that can retrieved
      later in the deployment process. For example, a Facet can be completed
      at each phase of the deployment process.</para>
    </section>

    <section>
      <title>Phase</title>

      <para>Due to parallel and modular deployment, the facets are added at
      different phases. A phase allows to group processors that needs to be
      executed at the same step.</para>

      <para>For example, processors that detect the nature of the artifact
      (Archive or Content) needs to be run before the processors that will ask
      these facets.</para>

      <para>There are two kind of phases :</para>

      <itemizedlist>
        <listitem>
          <para>First phases are the discovery phases that includes a
          pre-defined set of phases. These phases allow to discover the nature
          of an artifact (WAR, EJB, etc)</para>

          <para>Discovery phases are these ordered phases:</para>

          <itemizedlist>
            <listitem>
              <para><literal>URI_FETCHER</literal> : Manage to download/fetch
              artifacts. For example it can download/fetch maven2
              resources</para>
            </listitem>

            <listitem>
              <para><literal>URI_RESOLVER</literal> : URI resolver is in
              general applied on a local resource (file, bundle) on which the
              type can be detected (Archive or Content).</para>
            </listitem>

            <listitem>
              <para><literal>FACET_SCANNER</literal> : Scanners are called on
              the selected artifact. It will flag the archive or content with
              expected facets.</para>
            </listitem>

            <listitem>
              <para><literal>FACET_CONFLICTS</literal> : Try to Remove or add
              facets on artifacts if some of the facets are not compliant
              together.</para>
            </listitem>

            <listitem>
              <para><literal>DEPENDENCY_FINDER</literal> : It tries to find
              all dependencies of a selected artifact. (for example a
              deployment plan can reference several other artifacts)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>The next phases are dependent of the nature of the artifact
          that has been processed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Processor</title>

      <para>A processor is executed in a phase and can read and add facets on
      a given Artifact or can deploy an archive in a container, etc.</para>

      <para>A processor is providing capabilities and is executed only if its
      requirements are satisfied.</para>
    </section>

    <section>
      <title>ProcessorContext</title>

      <para>ProcessorContext interface allows to interfact on a given
      artifact. The processor context is available for each processor in their
      handle() method.</para>
    </section>
  </section>

  <section>
    <title>How to write a new processor</title>

    <para>Adding a processor is very easy as it only consits in annotating a
    class.</para>

    <section>
      <title>Writing the logic</title>

      <para>Here is an example of a processor that will print the URI of an
      artifact. The class is annotated with a @Processor annotation and the
      expected signature of the method is : <function>handle(&lt;Object of the
      artifact expected&gt;, ProcessorContext processorContext) throws
      ProcessorException</function></para>

      <programlisting language="java">@Processor
public class MyPrintProcessor {

    public void handle(Artifact artifact, ProcessorContext processorContext) throws ProcessorException {
        System.out.println("MyPrintProcessor : Artifact found is : " + artifact.uri());
    }
}</programlisting>
    </section>

    <section>
      <title>Defining the phase</title>

      <para>If the processor needs to be executed at START phase here is the
      annotation to add : @Phase("START")</para>

      <programlisting language="java">@Processor
@Phase("START")
public class MyPrintProcessor {

    public void handle(Artifact artifact, ProcessorContext processorContext) throws ProcessorException {
        System.out.println("MyPrintProcessor : Artifact found is : " + artifact.uri());
    }
}</programlisting>
    </section>

    <section>
      <title>Compiling and executing</title>

      <para>In order to execute and run this processor, it needs to be
      packaged with Apache Felix maven bundle-plugin and the Apache Felix
      iPOJO plugin. Then the bundle needs to be added on the platform.</para>

      <programlisting language="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
  &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
  &lt;version&gt;${maven-bundle-plugin.version}&lt;/version&gt;
  &lt;extensions&gt;true&lt;/extensions&gt;
  &lt;configuration&gt;
    &lt;instructions&gt;
      &lt;_plugin&gt;org.apache.felix.ipojo.bnd.PojoizationPlugin&lt;/_plugin&gt;
    &lt;/instructions&gt;
  &lt;/configuration&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
      &lt;artifactId&gt;bnd-ipojo-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.10.1&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/plugin&gt;</programlisting>
    </section>

    <section>
      <title>Clone an existing example</title>

      <para>A working example can be found on the GitHub platform. It is
      available on <link
      xlink:href="https://github.com/peergreen/deployment-processor-example">https://github.com/peergreen/deployment-processor-example</link>
      repository.</para>
    </section>
  </section>

  <section>
    <title>Annotation model</title>

    <para>The deployment API provides a set of annotations to write additional
    deployment processors.</para>

    <para>Each annotations are requirement expressions. Having multiple
    annotations on the same node must be understood as a logical AND: each of
    the requirements must be satisfied in order to execute the
    processor.</para>

    <section>
      <title>@Processor</title>

      <para>This annotation is placed on top of the class that will act as a
      processor.</para>

      <para>It is the only <emphasis>mandatory</emphasis> annotation.</para>

      <programlisting language="java">@Processor
public class AnotherProcessor {}</programlisting>
    </section>

    <section>
      <title>@Phase</title>

      <para>The <literal>@Phase</literal> annotation describe a processor
      bound to a named phase.</para>

      <programlisting language="java">@Phase("&lt;phase-name&gt;")</programlisting>
    </section>

    <section>
      <title>@Discovery</title>

      <para>The <literal>@Discovery</literal> annotation is a shortcut to ease
      requirement description on a phase located in the
      <emphasis>discovery</emphasis> global phase.</para>

      <para>It takes a unique value of enum type
      <literal>com.peergreen.deployment.DiscoveryPhasesLifecycle</literal>.</para>

      <programlisting language="java">@Discovery(DiscoveryPhasesLifecycle.FACET_SCANNER)</programlisting>
    </section>

    <section>
      <title>@Manifest</title>

      <para>The <literal>@Manifest</literal> annotation is a simple annotation
      container for <link
      linkend="manifest-attribute-annotation">@Attribute</link> values.</para>
    </section>

    <section xml:id="manifest-attribute-annotation">
      <title>@Attribute</title>

      <para>This annotation express a requirement on the manifest's
      attribute.</para>

      <para>It can be used 2 different ways:</para>

      <itemizedlist>
        <listitem>
          <para>requires only a named attribute to be present.</para>

          <programlisting language="java">@Attribute("Bundle-SymbolicName")</programlisting>
        </listitem>

        <listitem>
          <para>requires a named attribute with a given value.</para>

          <programlisting language="java">@Attribute("Header", "SomeValue")</programlisting>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>@Uri</title>

      <para>The <literal>@Uri</literal> express a requirement on artifact's
      uri.</para>

      <para>Developer can restrict their processor to run only for artifact's
      with a given URI scheme.</para>

      <programlisting language="java">@Uri("mvn")</programlisting>

      <para>Uri extension (<filename class="extension">.jar</filename>,
      <filename class="extension">.war</filename>, <filename
      class="extension">.zip</filename>) can also be selected.</para>

      <programlisting language="java">@Uri(extension = ".war")</programlisting>
    </section>

    <section>
      <title>@XmlNamespace</title>

      <para><literal>@XmlNamspace</literal>, as its name imply, can be used to
      bind processors to an Xml content whose root element's namespace is the
      given value.</para>

      <programlisting language="java">@XmlNamespace("http://www.w3.org/1999/XSL/Transform")</programlisting>
    </section>
  </section>
</chapter>
