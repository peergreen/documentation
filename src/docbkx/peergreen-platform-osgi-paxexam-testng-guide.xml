<?xml version="1.0" encoding="ISO-8859-1"?>
<book version="5.0" xml:id="paxexam-testng-tuto.book"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Testing OSGi applications with pax-exam 3, maven &amp; TestNG</title>
	<productname>Peergreen Platform</productname>
    <copyright>
      <year>2013</year>
    </copyright>

    <authorgroup>

      <author>
        <personname></personname>

        <affiliation>
          <orgname></orgname>
        </affiliation>
      </author>

    </authorgroup>

    <date><?eval ${date}?></date>
  </info>
  
	
  
  <chapter>
	<title>Testing OSGi applications with pax-exam 3, maven &amp; TestNG</title>
	<para>Pax Exam is a testing framework for both OSGi and Java EE 
	applications. This tutorial focuses on OSGi applications and 
	describes how to write a test with Pax Exam, maven and TestNG 
	on Peergreen Platform.</para>	
	
	<section>
	<title>Hello service</title>
	<para>We need an application to test. You can download the 
	basic example <emphasis>HelloService</emphasis> here. It 
	implements the Hello interface by relying on IPOJO service 
	component model. The interface contains a single method 
	named <emphasis>sayHello()</emphasis>. </para>
	
	<programlisting language="java">public interface Hello {
    String sayHello(String name);
}</programlisting>
	</section>
	
	<section>
		<title>Pax Exam / TestNG Test</title>
		
		<para>The test is provided in a separated maven project as an 
		integration test (it). You can download it here. In this Maven 
		project, we use Pax Exam 3 with a native container which uses 
		the OSGi FrameworkFactory API to look up an OSGi framework for 
		running the tests. The Native Container launches the OSGi 
		framework in the same VM. We basically use the dependencies 
		from the <link 
		xlink:href="https://ops4j1.jira.com/wiki/display/PAXEXAM3/Maven+Dependencies#MavenDependencies-NativeContainerExample">
		Pax Exam documentation</link> except that we replace JUnit 
		dependencies by TestNG ones. To note that TestNG requires to 
		add a dependency on JTA api.  We also define a dependency on 
		the Peergreen Platform itself on which we will run the test 
		and another dependency on the HelloService application.
		</para>
	
	<programlisting language="xml">ADD THE PEERGREEN REPOSITORY

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;osgi.core.version&gt;5.0.0&lt;/osgi.core.version&gt;
		&lt;exam.version&gt;3.0.0&lt;/exam.version&gt;		
		&lt;url.version&gt;1.5.2&lt;/url.version&gt;
		&lt;testng.version&gt;6.3.1&lt;/testng.version&gt;
		&lt;felix.version&gt;4.2.0&lt;/felix.version&gt;
		&lt;logback.version&gt;0.9.20&lt;/logback.version&gt;
		&lt;jta.version&gt;1.0.12&lt;/jta.version&gt;
		&lt;peergreen-platform.version&gt;1.0.0&lt;/peergreen-platform.version&gt;
		&lt;hello.version&gt;1.0.0&lt;/hello.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
			&lt;artifactId&gt;pax-exam-container-native&lt;/artifactId&gt;
			&lt;version&gt;${exam.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.testng&lt;/groupId&gt;
			&lt;artifactId&gt;testng&lt;/artifactId&gt;
			&lt;version&gt;${testng.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
			&lt;artifactId&gt;pax-exam-testng&lt;/artifactId&gt;
			&lt;version&gt;${exam.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
			&lt;artifactId&gt;pax-exam-link-mvn&lt;/artifactId&gt;
			&lt;version&gt;${exam.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.ops4j.pax.url&lt;/groupId&gt;
			&lt;artifactId&gt;pax-url-aether&lt;/artifactId&gt;
			&lt;version&gt;${url.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.osgi&lt;/groupId&gt;
			&lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
			&lt;version&gt;${osgi.core.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
			&lt;artifactId&gt;logback-core&lt;/artifactId&gt;
			&lt;version&gt;${logback.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
			&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
			&lt;version&gt;${logback.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.ow2.spec.ee&lt;/groupId&gt;
			&lt;artifactId&gt;ow2-jta-1.1-spec&lt;/artifactId&gt;
			&lt;version&gt;${jta.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;com.peergreen.example&lt;/groupId&gt;
			&lt;artifactId&gt;hello-service&lt;/artifactId&gt;
			&lt;version&gt;${hello.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;com.peergreen.platform&lt;/groupId&gt;
			&lt;artifactId&gt;platform-light&lt;/artifactId&gt;
			&lt;version&gt;${peergreen-platform.version}&lt;/version&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;
		
	&lt;/dependencies&gt;
	</programlisting>
	
	<para>The test itself is pretty simple and it is just used to 
	check the HelloService bundle presence and state, to check the 
	HelloService availability and finally to check the sayHello() 
	method return. The annotations are described in the Pax Exam 
	documentation <link 
	xlink:href="https://ops4j1.jira.com/wiki/display/PAXEXAM3/JUnit+Driver">
	here</link>. </para>
	
	<para>In the <emphasis>@Config method</emphasis>, in one hand one 
	reduces the log level to make Pax Exam a bit less verbose and in 
	another hand, one defines the bundles list to deploy on the OSGi 
	platform (JUnit and Hello Service).</para>
	
	<programlisting language="java">@Listeners(PaxExam.class)
@ExamReactorStrategy(PerClass.class)
public class HelloServiceTest {

	@Inject
	BundleContext context;

	@Inject
	private Hello helloService;

	@Configuration
	public Option[] config() {

		// Reduce log level.
		Logger root = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
		root.setLevel(Level.INFO);

		return options(
			systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("WARN"),
			mavenBundle("com.peergreen.example", "hello-service","1.0.0")
			);
	}

	@Test
	public void checkInject() {
		assert (!context.equals(null)) : "Bundle context was not injected";
		assert (!helloService.equals(null)) : "helloService was not injected";
	}

	@Test
	public void checkHelloBundle() {
		Boolean found=false;
		Boolean active=false;
		Bundle[] bundles = context.getBundles();
        for (Bundle bundle : bundles) {
        	if (bundle != null) {
        		if (bundle.getSymbolicName().equals("com.peergreen.example.ipojo-hello-service")) {
        			found=true;
        			if(bundle.getState() == Bundle.ACTIVE) {
        				active = true;
        			}
        		}
        	}
		}
        assert found : "Hello bundle not found";
        assert active : "Hello bundle not active";	
	}
	
	@Test
	public void getHelloService() {
		assert helloService.sayHello("test").equals("hello test") : "Hello service should return 'hello test'";
	}
}
	</programlisting>
	
	<para>When we launch the test, we got the expected result:</para>
	
	<screen>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
14:23:38.765 [main] DEBUG o.o.pax.exam.testng.listener.PaxExam - created ExamTestNGListener
14:23:38.814 [main] INFO  o.o.pax.exam.spi.DefaultExamSystem - Pax Exam System (Version: 3.0.0) created.
14:23:38.834 [main] DEBUG o.ops4j.store.intern.TemporaryStore - Storage Area is /tmp/1363872218818-0
14:23:38.838 [main] DEBUG o.o.pax.exam.testng.listener.PaxExam - test class = class com.peergreen.example.ipojo.hello.it.testng.paxexam.HelloServiceTest
14:23:38.842 [main] DEBUG o.ops4j.pax.exam.spi.PaxExamRuntime - Found TestContainerFactory: org.ops4j.pax.exam.nat.internal.NativeTestContainerFactory
14:23:38.928 [main] INFO  o.o.pax.exam.testng.listener.PaxExam - running checkHelloBundle
     ___                                                       ___  _         _     __                         
    / _ \  ___   ___  _ __   __ _  _ __   ___   ___  _ __     / _ \| |  __ _ | |_  / _|  ___   _ __  _ __ ___  
   / /_)/ / _ \ / _ \| '__| / _` || '__| / _ \ / _ \| '_ \   / /_)/| | / _` || __|| |_  / _ \ | '__|| '_ ` _ \ 
  / ___/ |  __/|  __/| |   | (_| || |   |  __/|  __/| | | | / ___/ | || (_| || |_ |  _|| (_) || |   | | | | | |
  \/      \___| \___||_|    \__, ||_|    \___| \___||_| |_| \/     |_| \__,_| \__||_|   \___/ |_|   |_| |_| |_|
                            |___/
                                           ___                          _ _          ___    _ _ _   _          
                                          / __|___ _ __  _ __ _  _ _ _ (_) |_ _  _  | __|__| (_) |_(_)___ _ _  
                                         | (__/ _ \ '  \| '  \ || | ' \| |  _| || | | _|/ _` | |  _| / _ \ ' \ 
                                          \___\___/_|_|_|_|_|_\_,_|_||_|_|\__|\_, | |___\__,_|_|\__|_\___/_||_|
                                                                              |__/
Start component
14:23:42.072 [Peergreen Kernel Main Thread] INFO  o.o.pax.exam.testng.listener.PaxExam - running checkInject
14:23:42.074 [Peergreen Kernel Main Thread] INFO  o.o.pax.exam.testng.listener.PaxExam - running getHelloService
Stop component
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.612 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

	</screen>
	</section>
  </chapter>
</book>
