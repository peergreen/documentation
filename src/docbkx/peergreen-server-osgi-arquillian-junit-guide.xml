<?xml version="1.0" encoding="ISO-8859-1"?>
<book version="5.0" xml:id="pg-arquillian-junit-tuto"
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Testing OSGi applications with Arquillian, maven &amp; JUnit</title>
	<productname>Peergreen Server</productname>
    <copyright>
      <year>2013</year>
    </copyright>

    <authorgroup>

      <author>
        <personname></personname>

        <affiliation>
          <orgname></orgname>
        </affiliation>
      </author>

    </authorgroup>

    <date><?eval ${date}?></date>
  </info>
  
	
  
  <chapter>
	<title>Introduction</title>
	<para>Arquillian (<link	xlink:href="http://arquillian.org">http://arquillian.org
	</link>) is a testing framework for both OSGi and Java EE applications. This 
	tutorial focuses on OSGi applications and describes how to write a unit test 
	with Arquillian, maven and JUnit on Peergreen Server.</para>	
  </chapter>
  <chapter>
	<title>BasicLogService, the OSGi application to test</title>
	<para>We need an application to test. You can download the basic example 
	<emphasis>BasicLogService</emphasis> <link 
	xlink:href="https://github.com/peergreen/arquillian">here</link>. It implements 
	the OSGi's LogService interface.</para>
	
	<programlisting language="java">/**
 * Copyright 2013 Peergreen S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.peergreen.example.arquillian.bundle;

import org.osgi.framework.ServiceReference;
import org.osgi.service.log.LogService;


public class BasicLogService implements LogService {

    public void log(int level, String message) {
        log(null, level, message, null);
    }

    public void log(int level, String message, Throwable exception) {
        log(null, level, message, exception);
    }

    public void log(ServiceReference sr, int level, String message) {
        log(sr, level, message, null);
    }

    public void log(ServiceReference serviceReference, int level, String message, Throwable exception) {
        String userLevel = null;

        if (exception != null) {
            message += ", exception:" + exception.getCause();
        }

        switch (level) {
        case LogService.LOG_ERROR:
            userLevel = "ERROR";
            break;
        case LogService.LOG_WARNING:
            userLevel = "WARNING";
            break;
        case LogService.LOG_INFO:
            userLevel = "INFO";
            break;
        case LogService.LOG_DEBUG:
            userLevel = "DEBUG";
            break;
        }

        System.out.println("[" + userLevel + "] " + message);
    }

}</programlisting>
	<para>To start the service at the bundle activation, we need an Activator :</para>
	<programlisting language="java">/**
 * Copyright 2013 Peergreen S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.peergreen.example.arquillian.bundle;

import java.util.Dictionary;
import java.util.Hashtable;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.log.LogService;

/**
 * Defines the activator by registering a Log Service at startup and canceling its registration at shutdown.
 * @author Florent Benoit
 */
public class Activator implements BundleActivator {

    private ServiceRegistration&lt;LogService> serviceRegistration;

    public void start(BundleContext bundleContext) {
        LogService logService = new BasicLogService();
        Dictionary&lt;String, String> properties = new Hashtable&lt;String, String>();
        properties.put("nature", "basic");
        serviceRegistration = bundleContext.registerService(LogService.class, logService, properties);
        System.out.println("service started");
    }

    public void stop(BundleContext context) {
        if (serviceRegistration != null) {
            serviceRegistration.unregister();
            System.out.println("service stopped");

        }
    }
}</programlisting>
	</chapter>
	
	<chapter>
		<title>Arquillian/ JUnit Test</title>
		<para>The test is provided in the same maven project as an unit 
		test (under the src/test directory). In this Maven project, we 
		use the dependencies for using arquillian OSGi adapter in the 
		<link xlink:href="https://docs.jboss.org/author/display/JBOSGI/Arquillian+Test+Framework">
		embedded mode</link>. We also define a dependency on the Peergreen 
		Server itself on which we will run the test.</para>
	
	
	<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright 2013 Peergreen S.A.S.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;com.peergreen.example.arquillian&lt;/groupId&gt;
  &lt;artifactId&gt;arquillian-example-bundle&lt;/artifactId&gt;
  &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;

  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;arquillian.version&gt;1.0.3.Final&lt;/arquillian.version&gt;
    &lt;osgi.core.version&gt;5.0.0&lt;/osgi.core.version&gt;
    &lt;osgi.compendium.version&gt;4.3.1&lt;/osgi.compendium.version&gt;
    &lt;junit.version&gt;4.11&lt;/junit.version&gt;
    &lt;peergreen-server.version&gt;1.0.0&lt;/peergreen-server.version&gt;
    &lt;maven-bundle-plugin.version&gt;2.3.7&lt;/maven-bundle-plugin.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;!-- OSGi API --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.osgi&lt;/groupId&gt;
      &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
      &lt;version&gt;${osgi.core.version}&lt;/version&gt;
      &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.osgi&lt;/groupId&gt;
      &lt;artifactId&gt;org.osgi.compendium&lt;/artifactId&gt;
      &lt;version&gt;${osgi.compendium.version}&lt;/version&gt;
      &lt;scope&gt;compile&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- JUnit --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;${junit.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- OSGi Arquillian --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.arquillian.container&lt;/groupId&gt;
      &lt;artifactId&gt;arquillian-container-osgi-embedded&lt;/artifactId&gt;
      &lt;version&gt;${arquillian.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.arquillian.junit&lt;/groupId&gt;
      &lt;artifactId&gt;arquillian-junit-container&lt;/artifactId&gt;
      &lt;version&gt;${arquillian.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Peergreen server --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.peergreen.server&lt;/groupId&gt;
      &lt;artifactId&gt;peergreen-server-light&lt;/artifactId&gt;
      &lt;version&gt;${peergreen-server.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

  &lt;/dependencies&gt;


  &lt;repositories&gt;
    &lt;!-- Peergreen repository --&gt;
    &lt;repository&gt;
      &lt;id&gt;peergreen&lt;/id&gt;
      &lt;name&gt;Peergreen Maven2 Repository&lt;/name&gt;
      &lt;url&gt;https://forge.peergreen.com/repository/content/groups/public/&lt;/url&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;

    &lt;!-- Arquillian repository --&gt;
    &lt;repository&gt;
      &lt;id&gt;jboss-release&lt;/id&gt;
      &lt;name&gt;JBoss Release&lt;/name&gt;
      &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/releases/&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;

  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
        &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
        &lt;version&gt;${maven-bundle-plugin.version}&lt;/version&gt;
        &lt;extensions&gt;true&lt;/extensions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;

&lt;/project&gt;</programlisting>
	
	<para>The test itself consists in checking the bundle state and the 
	service injection. The deployment method creates the application bundle 
	with the application classes and the LogService interface.</para>
	
	<programlisting language="java">/**
 * Copyright 2013 Peergreen S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.peergreen.example.arquillian.bundle;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.InputStream;
import java.util.Collection;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.osgi.metadata.OSGiManifestBuilder;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.Asset;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceReference;
import org.osgi.service.log.LogService;

/**
 * Deploy the bundle and check if all is fine with the deployment on Peergreen platform.
 * @author Florent Benoit
 */
@RunWith(Arquillian.class)
public class TestWithJUnitMyBundle {

    /**
     * Symbolic Name.
     */
    private static final String SYMBOLIC_NAME = "my-bundle";

    /**
     * LDAP filter for selecting our implementation of the log service.
     */
    private static final String FILTER = "(&amp;(" + Constants.OBJECTCLASS + "=" + LogService.class.getName()
            + ")(nature=basic))";

    /**
     * Injects the bundle context.
     */
    @ArquillianResource
    public BundleContext bundleContext;

    /**
     * Injects the bundle.
     */
    @ArquillianResource
    public Bundle bundle;

    /**
     * Creates a new Java Archive.
     * 
     * @return the archive
     */
    @Deployment
    public static JavaArchive createdeployment() {
        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, "mybundle.jar");
        archive.setManifest(new Asset() {
            public InputStream openStream() {
                // Adds OSGi entries
                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();
                builder.addBundleManifestVersion(2);
                builder.addBundleSymbolicName(SYMBOLIC_NAME);
                builder.addBundleVersion("1.0.0");

                // Import the LogService package
                builder.addImportPackages(LogService.class);

                // Adds an activator
                builder.addBundleActivator(Activator.class.getName());
                return builder.openStream();
            }
        });

        return archive.addClasses(Activator.class, BasicLogService.class);
    }

    @Test
    public void testBundleContextInjection() {
        assertNotNull("BundleContext injected", bundleContext);
    }

    @Test
    public void testBundleInjection() throws Exception {
        assertNotNull("Bundle injected", bundle);
        assertEquals("Bundle RESOLVED", Bundle.RESOLVED, bundle.getState());
        bundle.start();
        assertEquals("Bundle ACTIVE", Bundle.ACTIVE, bundle.getState());
    }

    @Test
    public void testSymbolicNameAvailable() throws InvalidSyntaxException {
        assertNotNull(bundleContext);
        Bundle[] bundles = bundleContext.getBundles();
        boolean found = false;
        int b = 0;
        while (b &lt; bundles.length &amp;&amp; !found) {
            Bundle bundle = bundles[b];
            String symbolicName = bundle.getSymbolicName();
            if (SYMBOLIC_NAME.equals(symbolicName)) {
                found = true;
                break;
            }
            b++;
        }
        assertTrue(found);

    }

    @Test
    public void testService() throws InvalidSyntaxException {

        // Gets the service reference
        Collection&lt;ServiceReference&lt;LogService>> logServiceReferences = bundleContext.getServiceReferences(
                LogService.class, FILTER);
        assertNotNull("service references is null", logServiceReferences);

        // We should have only one reference matching this filter
        assertEquals(1, logServiceReferences.size());

        // takes the first element
        ServiceReference&lt;LogService> logServiceReference = logServiceReferences.iterator().next();

        // check service property
        String nature = (String) logServiceReference.getProperty("nature");
        assertNotNull("No nature property on the service reference", nature);
        assertEquals("basic", nature);

        // Check that the service is here
        LogService logService = bundleContext.getService(logServiceReference);
        assertNotNull("Log service not Found", logService);

        // use it
        logService.log(LogService.LOG_DEBUG, "test");

    }

    @Test
    public void testStop() throws Exception {
        bundle.stop();
        assertEquals("Bundle RESOLVED", Bundle.RESOLVED, bundle.getState());
    }

}</programlisting>
	
	<para>When we launch the test, we got the expected result:</para>
	
	<screen><prompt>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.peergreen.example.mybundle.junit.arquillian.TestMyBundle
     ___                                                       ___  _         _     __                         
    / _ \  ___   ___  _ __   __ _  _ __   ___   ___  _ __     / _ \| |  __ _ | |_  / _|  ___   _ __  _ __ ___  
   / /_)/ / _ \ / _ \| '__| / _` || '__| / _ \ / _ \| '_ \   / /_)/| | / _` || __|| |_  / _ \ | '__|| '_ ` _ \ 
  / ___/ |  __/|  __/| |   | (_| || |   |  __/|  __/| | | | / ___/ | || (_| || |_ |  _|| (_) || |   | | | | | |
  \/      \___| \___||_|    \__, ||_|    \___| \___||_| |_| \/     |_| \__,_| \__||_|   \___/ |_|   |_| |_| |_|
                            |___/
                                           ___                          _ _          ___    _ _ _   _          
                                          / __|___ _ __  _ __ _  _ _ _ (_) |_ _  _  | __|__| (_) |_(_)___ _ _  
                                         | (__/ _ \ '  \| '  \ || | ' \| |  _| || | | _|/ _` | |  _| / _ \ ' \ 
                                          \___\___/_|_|_|_|_|_\_,_|_||_|_|\__|\_, | |___\__,_|_|\__|_\___/_||_|
                                                                              |__/
service started
[DEBUG] test
service stopped
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.044 sec

Results :

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0</prompt></screen>
  </chapter>
</book>
