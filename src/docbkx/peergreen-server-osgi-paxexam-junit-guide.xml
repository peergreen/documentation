<?xml version="1.0" encoding="ISO-8859-1"?>
<book version="5.0" xml:id="pg-paxexam-junit-tuto" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Testing OSGi applications with pax-exam 3, maven &amp; JUnit</title>

    <productname>Peergreen Server</productname>

    <copyright>
      <year>2013</year>

      <holder>Peergreen SAS</holder>
    </copyright>

    <authorgroup>
      <author>
        <personname/>

        <affiliation>
          <orgname/>
        </affiliation>
      </author>
    </authorgroup>

    <date><?eval ${currentDate}?></date>

    <releaseinfo><?eval ${peergreenServerVersion} ?></releaseinfo>

    <legalnotice>
      <para>This work is licensed under the Attribution-NonCommercial-NoDerivs 3.0 Unported License (CC BY-NC-ND 3.0).
      To view a copy of this license,visit <link
      xlink:href="http://creativecommons.org/licenses/by-nc-nd/3.0/">http://creativecommons.org/licenses/by-nc-nd/3.0/</link>
      or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.</para>
    </legalnotice>
  </info>

  <chapter>
    <title>Introduction</title>

    <para>Pax Exam is a testing framework for both OSGi and Java EE applications. This tutorial focuses on OSGi
    applications and describes how to write a test with Pax Exam, maven and JUnit on Peergreen Server.</para>
  </chapter>

  <chapter>
    <title>Hello service</title>

    <para>We need an application to test. You can download the basic example <emphasis>HelloService</emphasis> <link
    xlink:href="https://github.com/peergreen/pax-exam/tree/master/hello-service">here</link>. It implements the Hello
    interface by relying on IPOJO service component model. The interface contains a single method named
    <emphasis>sayHello()</emphasis>.</para>

    <programlisting language="java">public interface Hello {
    String sayHello(String name);
}</programlisting>
  </chapter>

  <chapter>
    <title>Pax Exam / JUnit Test</title>

    <para>The test is provided in a separated maven project as an integration test (it). You can download it here. In
    this Maven project, we use Pax Exam 3 with a native container which uses the OSGi FrameworkFactory API to look up an
    OSGi framework for running the tests. The Native Container launches the OSGi framework in the same VM. We basically
    use the dependencies from the <link
    xlink:href="https://ops4j1.jira.com/wiki/display/PAXEXAM3/Maven+Dependencies#MavenDependencies-NativeContainerExample">
    Pax Exam documentation</link>. We also define a dependency on the Peergreen Server itself on which we will run the
    test and another dependency on the HelloService application.</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright 2013 Peergreen S.A.S.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;parent&gt;
    &lt;groupId&gt;com.peergreen.example.paxexam&lt;/groupId&gt;
    &lt;artifactId&gt;paxexam-itests&lt;/artifactId&gt;
    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;artifactId&gt;paxexam-itests-junit&lt;/artifactId&gt;

  &lt;name&gt;Pax Exam Example :: iTests :: Junit&lt;/name&gt;

  &lt;properties&gt;
    &lt;junit.version&gt;4.11&lt;/junit.version&gt;
    &lt;logback.version&gt;0.9.20&lt;/logback.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
  
    &lt;dependency&gt;
      &lt;groupId&gt;com.peergreen.example.paxexam&lt;/groupId&gt;
      &lt;artifactId&gt;paxexam-hello-service&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;com.peergreen.community&lt;/groupId&gt;
      &lt;artifactId&gt;peergreen-server-light&lt;/artifactId&gt;
      &lt;version&gt;<?eval ${peergreenServerVersion}?>&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;${junit.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
      &lt;artifactId&gt;pax-exam-container-native&lt;/artifactId&gt;
      &lt;version&gt;${pax.exam.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
      &lt;artifactId&gt;pax-exam-junit4&lt;/artifactId&gt;
      &lt;version&gt;${pax.exam.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
      &lt;artifactId&gt;logback-core&lt;/artifactId&gt;
      &lt;version&gt;${logback.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
      &lt;version&gt;${logback.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.ow2.spec.ee&lt;/groupId&gt;
      &lt;artifactId&gt;ow2-atinject-1.0-spec&lt;/artifactId&gt;
      &lt;version&gt;1.0.12&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.ops4j.pax.exam&lt;/groupId&gt;
      &lt;artifactId&gt;pax-exam-link-mvn&lt;/artifactId&gt;
      &lt;version&gt;${pax.exam.version}&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
      &lt;groupId&gt;org.ops4j.pax.url&lt;/groupId&gt;
      &lt;artifactId&gt;pax-url-aether&lt;/artifactId&gt;
      &lt;version&gt;1.5.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

  &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>

    <para>The test itself is pretty simple and it is just used to check the HelloService bundle presence and state, to
    check the HelloService availability and finally to check the sayHello() method return. The annotations are described
    in the Pax Exam documentation <link xlink:href="https://ops4j1.jira.com/wiki/display/PAXEXAM3/JUnit+Driver">
    here</link>.</para>

    <para>In the <emphasis>@Config method</emphasis>, in one hand one reduces the log level to make Pax Exam a bit less
    verbose and in another hand, one defines the bundles list to deploy on the OSGi platform (JUnit and Hello
    Service).</para>

    <programlisting language="java">/**
 * Copyright 2013 Peergreen S.A.S.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.peergreen.example.paxexam.itests.junit;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.ops4j.pax.exam.CoreOptions.junitBundles;
import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
import static org.ops4j.pax.exam.CoreOptions.options;
import static org.ops4j.pax.exam.CoreOptions.systemProperty;

import javax.inject.Inject;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.ops4j.pax.exam.Configuration;
import org.ops4j.pax.exam.Option;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerClass;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;
import org.slf4j.LoggerFactory;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;

import com.peergreen.example.paxexam.hello.api.Hello;

/**
 * Tests the given bundle with JUnit and Pax Exam.
 * @author Florent Benoit
 */
@RunWith(PaxExam.class)
@ExamReactorStrategy(PerClass.class)
public class HelloServiceTest {

    @Inject
    BundleContext context;

    @Inject
    private Hello helloService;

    @Configuration
    public Option[] config() {

        // Reduce log level.
        Logger root = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
        root.setLevel(Level.INFO);

        return options(systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("WARN"),
                mavenBundle("com.peergreen.example.paxexam", "paxexam-hello-service").version("1.0.0-SNAPSHOT"),
                junitBundles());
    }

    @Test
    public void checkInject() {
        assertNotNull(context);
        assertNotNull(helloService);
    }

    @Test
    public void checkHelloBundle() {
        Boolean bundleHelloFound = false;
        Boolean bundleHelloActive = false;
        Bundle[] bundles = context.getBundles();
        for (Bundle bundle : bundles) {
            if (bundle != null) {
                if (bundle.getSymbolicName().equals("com.peergreen.example.paxexam.hello-service")) {
                    bundleHelloFound = true;
                    if (bundle.getState() == Bundle.ACTIVE) {
                        bundleHelloActive = true;
                    }
                }
            }
        }
        assertTrue(bundleHelloFound);
        assertTrue(bundleHelloActive);
    }

    @Test
    public void getHelloService() {
        assertEquals("hello test", helloService.sayHello("test"));
	}
}</programlisting>

    <para>When we launch the test, we got the expected result:</para>

    <screen><prompt>-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.peergreen.example.paxexam.itests.junit.HelloServiceTest
14:21:11.123 [main] INFO  org.ops4j.pax.exam.junit.PaxExam - creating PaxExam runner for class com.peergreen.example.paxexam.itests.junit.HelloServiceTest
14:21:11.144 [main] INFO  o.o.pax.exam.spi.DefaultExamSystem - Pax Exam System (Version: 3.0.0) created.
14:21:11.148 [main] DEBUG o.ops4j.store.intern.TemporaryStore - Storage Area is /var/folders/6g/6l4s2zm13fscwwhq9pxpfl3c0000gn/T/1365078071147-0
14:21:11.153 [main] DEBUG o.ops4j.pax.exam.spi.PaxExamRuntime - Found TestContainerFactory: org.ops4j.pax.exam.nat.internal.NativeTestContainerFactory
14:21:11.172 [main] INFO  org.ops4j.pax.exam.junit.PaxExam - running test class com.peergreen.example.paxexam.itests.junit.HelloServiceTest
 ____                                           ____                           
|  _ \ ___  ___ _ __ __ _ _ __ ___  ___ _ __   / ___|  ___ _ ____   _____ _ __ 
| |_) / _ \/ _ \ '__/ _` | '__/ _ \/ _ \ '_ \  \___ \ / _ \ '__\ \ / / _ \ '__|
|  __/  __/  __/ | | (_| | | |  __/  __/ | | |  ___) |  __/ |   \ V /  __/ |   
|_|   \___|\___|_|  \__, |_|  \___|\___|_| |_| |____/ \___|_|    \_/ \___|_|   
                    |___/____                                      _ _         
                        / ___|___  _ __ ___  _ __ ___  _   _ _ __ (_) |_ _   _ 
                       | |   / _ \| '_ ` _ \| '_ ` _ \| | | | '_ \| | __| | | |
                       | |__| (_) | | | | | | | | | | | |_| | | | | | |_| |_| |
                        \____\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|_|\__|\__, |
                                                _____    _ _ _   _       |___/ 
                                               | ____|__| (_) |_(_) ___  _ __  
                                               |  _| / _` | | __| |/ _ \| '_ \ 
                                               | |__| (_| | | |_| | (_) | | | |
                                               |_____\__,_|_|\__|_|\___/|_| |_|

Start component
Stop component
14:21:13.531 [Peergreen Kernel Main Thread] INFO  o.o.p.e.spi.reactors.ReactorManager - suite finished
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.521 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0</prompt></screen>
  </chapter>
</book>
